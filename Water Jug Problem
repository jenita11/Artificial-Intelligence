def water_jug_problem(capacity_a, capacity_b, target):
    if target > max(capacity_a, capacity_b) or target < 0:
        return None
    visited = set()
    # Queue elements are (a, b, path), where path is a list of (operation, a, b)
    queue = [(0, 0, [])]
    visited.add((0, 0))
    
    while queue:
        a, b, path = queue.pop(0)
        if a == target or b == target:
            return path + [("Goal", a, b)]
        
        operations = [
            ("Fill A", capacity_a, b),
            ("Fill B", a, capacity_b),
            ("Empty A", 0, b),
            ("Empty B", a, 0),
            ("Pour A to B", max(0, a - (capacity_b - b)), min(capacity_b, a + b)),
            ("Pour B to A", min(capacity_a, a + b), max(0, b - (capacity_a - a))),
        ]
        
        for op_name, next_a, next_b in operations:
            if (next_a, next_b) not in visited:
                visited.add((next_a, next_b))
                queue.append((next_a, next_b, path + [(op_name, a, b)]))
    return None

def main():
    try:
        capacity_a = int(input("Enter the capacity of jug A: "))
        capacity_b = int(input("Enter the capacity of jug B: "))
        target = int(input("Enter the target amount of water: "))
        if capacity_a < 0 or capacity_b < 0 or target < 0:
            print("Capacities and target must be non-negative integers.")
            return
        solution = water_jug_problem(capacity_a, capacity_b, target)
        if solution:
            print("\nSolution Steps:")
            for i, (op, a, b) in enumerate(solution):
                print(f"Step {i + 1}: {op.ljust(12)} -> Jug A = {a}, Jug B = {b}")
        else:
            print("\nNo solution found for the given capacities and target.")
    except ValueError:
        print("Invalid input. Please enter integers for capacities and target.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    main()
