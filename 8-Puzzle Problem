import heapq

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = self.depth + self.manhattan_distance()
        
    def __lt__(self, other):
        return self.cost < other.cost
    
    def __eq__(self, other):
        return self.state == other.state
    
    def __hash__(self):
        return hash(tuple(tuple(row) for row in self.state))
    
    def manhattan_distance(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    x, y = divmod(self.state[i][j]-1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance
    
    def is_goal(self):
        goal = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        return self.state == goal
    
    def get_blank_pos(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return (i, j)
    
    def get_neighbors(self):
        neighbors = []
        i, j = self.get_blank_pos()
        
        # Possible moves: up, down, left, right
        moves = [(-1, 0, 'Up'), (1, 0, 'Down'), (0, -1, 'Left'), (0, 1, 'Right')]
        
        for di, dj, move in moves:
            ni, nj = i + di, j + dj
            if 0 <= ni < 3 and 0 <= nj < 3:
                new_state = [row[:] for row in self.state]
                new_state[i][j], new_state[ni][nj] = new_state[ni][nj], new_state[i][j]
                neighbors.append(PuzzleNode(new_state, self, move, self.depth + 1))
        
        return neighbors
    
    def get_path(self):
        path = []
        node = self
        while node.parent is not None:
            path.append(node.move)
            node = node.parent
        return path[::-1]

def solve_8_puzzle(initial_state):
    start_node = PuzzleNode(initial_state)
    open_set = []
    heapq.heappush(open_set, start_node)
    closed_set = set()
    
    while open_set:
        current_node = heapq.heappop(open_set)
        
        if current_node.is_goal():
            return current_node.get_path()
        
        closed_set.add(current_node)
        
        for neighbor in current_node.get_neighbors():
            if neighbor in closed_set:
                continue
            
            # Check if neighbor is in open set with higher cost
            in_open = False
            for node in open_set:
                if neighbor == node and neighbor.cost >= node.cost:
                    in_open = True
                    break
            
            if not in_open:
                heapq.heappush(open_set, neighbor)
    
    return None  # No solution found

def print_puzzle(state):
    for row in state:
        print(' '.join(str(num) if num != 0 else ' ' for num in row))
    print()

# Example usage
if __name__ == "__main__":
    # Test with a solvable initial state
    initial_state = [
        [1, 2, 3],
        [4, 5, 6],
        [0, 7, 8]
    ]
    
    print("Initial state:")
    print_puzzle(initial_state)
    
    solution = solve_8_puzzle(initial_state)
    
    if solution:
        print(f"Solution found in {len(solution)} moves:")
        print(" -> ".join(solution))
        
        # Reconstruct the solution path
        current_node = PuzzleNode(initial_state)
        print("\nSolution steps:")
        print_puzzle(current_node.state)
        
        for move in solution:
            for neighbor in current_node.get_neighbors():
                if neighbor.move == move:
                    current_node = neighbor
                    print(f"Move: {move}")
                    print_puzzle(current_node.state)
                    break
    else:
        print("No solution exists for the given initial state.")
